{"version":3,"sources":["components/EmptySearchErrorMessage/index.js","components/ErrorMessage/index.js","components/NewSearchMessage/index.js","components/SearchHistoryElement/index.js","components/SearchInput/index.js","components/SearchResult/index.js","App.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["EmptySearchErrorMessage","className","ErrorMessage","NewSearchMessage","SearchHistoryElement","searchTerm","submitSearch","onClick","event","SearchInput","handleInputChange","query","Navbar","bg","expand","Brand","Form","inline","onSubmit","FormControl","type","placeholder","onChange","value","Button","variant","SearchResult","title","author","url","href","App","useState","queryState","setQueryState","searchResults","setSearchResults","errorExists","setErrorExists","emptySearch","setEmptySearch","submittedSearch","setSubmittedSearch","userSearchHistory","useSelector","state","searchHistory","dispatch","useDispatch","a","preventDefault","trim","axios","get","data","hits","e","target","Container","length","Row","Col","md","map","index","key","console","log","result","objectID","Boolean","window","location","hostname","match","initState","rootReducer","action","includes","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yTAMeA,MAJf,WACE,OAAO,wBAAIC,UAAU,iBAAd,6BCGMC,MAJf,WACE,OAAO,wBAAID,UAAU,iBAAd,yDCOME,MARf,WACE,OACE,wBAAIF,UAAU,sBAAd,gECSWG,MAXf,YAA6D,IAA7BC,EAA4B,EAA5BA,WAAYC,EAAgB,EAAhBA,aAC1C,OACE,uBACEL,UAAU,yBACVM,QAAS,SAACC,GAAD,OAAWF,EAAaD,EAAYG,KAE5CH,I,gCCsBQI,MA3Bf,YAAkE,IAA3CC,EAA0C,EAA1CA,kBAAmBJ,EAAuB,EAAvBA,aAAcK,EAAS,EAATA,MACtD,OACE,kBAACC,EAAA,EAAD,CAAQX,UAAU,SAASY,GAAG,OAAOC,OAAO,MAC1C,kBAACF,EAAA,EAAOG,MAAR,2BACA,kBAACC,EAAA,EAAD,CACEC,QAAM,EACNhB,UAAU,UACViB,SAAU,SAACV,GAAD,OAAWF,EAAaK,EAAOH,KAEzC,kBAACW,EAAA,EAAD,CACEC,KAAK,OACLC,YAAY,SACZpB,UAAU,UACVqB,SAAUZ,EACVa,MAAOZ,IAET,kBAACa,EAAA,EAAD,CACEC,QAAQ,kBACRlB,QAAS,SAACC,GAAD,OAAWF,EAAaK,EAAOH,KAF1C,aCPOkB,MAVf,YAA+C,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,OAAQC,EAAO,EAAPA,IACrC,OACE,yBAAK5B,UAAU,qBACb,0BAAMA,UAAU,sBACd,uBAAG6B,KAAMD,GAAMF,GADjB,QACiCC,K,iBCoGxBG,MA9Ff,WAAgB,IAAD,EACuBC,mBAAS,IADhC,mBACNC,EADM,KACMC,EADN,OAE6BF,qBAF7B,mBAENG,EAFM,KAESC,EAFT,OAGyBJ,oBAAS,GAHlC,mBAGNK,EAHM,KAGOC,EAHP,OAIyBN,oBAAS,GAJlC,mBAINO,EAJM,KAIOC,EAJP,OAKiCR,oBAAS,GAL1C,mBAKNS,EALM,KAKWC,EALX,KAOPC,EAAoBC,aAAY,SAACC,GAAD,OAAWA,EAAMC,iBAEjDC,EAAWC,cATJ,SAeE1C,EAfF,gFAeb,WAA4BK,EAAOH,GAAnC,eAAAyC,EAAA,yDACEzC,EAAM0C,iBAENZ,GAAe,GACfE,GAAe,GACfE,GAAmB,GAEE,KAAjB/B,EAAMwC,OAPZ,uBAQIf,EAAiB,IACjBI,GAAe,GATnB,kBAUWF,GAAe,IAV1B,cAaES,EAAS,CACP3B,KAAM,wBACNf,WAAY4B,IAfhB,mBAmBuBmB,IAAMC,IAAN,qDAC6B1C,IApBpD,eAmBU2C,EAnBV,OAsBIpB,EAAc,IAtBlB,kBAuBWE,EAAiBkB,EAAKA,KAAKC,OAvBtC,kCAyBIjB,GAAe,GACfJ,EAAc,IA1BlB,2DAfa,sBA6Cb,OACE,yBAAKjC,UAAU,OACb,kBAAC,EAAD,CACEA,UAAU,eACVS,kBAtCN,SAA2B8C,GACzBtB,EAAcsB,EAAEC,OAAOlC,QAsCnBjB,aAAcA,EACdK,MAAOsB,IAET,kBAACyB,EAAA,EAAD,KACgC,IAA7Bf,EAAkBgB,SAAiBlB,GAClC,kBAAC,EAAD,MAEDJ,GAAe,kBAAC,EAAD,MACfE,GAAe,kBAAC,EAAD,MAChB,kBAACqB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,EAAG7D,UAAU,eACnB0C,EAAkBgB,OAAS,GAAK,kDAChChB,EAAkBoB,KAAI,SAAC1D,EAAY2D,GAAb,OACrB,kBAAC,EAAD,CACEC,IAAKD,EACL1D,aAAcA,EACdD,WAAYA,QAIlB,kBAACwD,EAAA,EAAD,CAAKC,GAAI,EAAG7D,UAAU,0BACnBiE,QAAQC,IAAI,iBAAkBhC,GAC9BA,GAAiBA,EAAcwB,OAAS,GACvC,+CAEDxB,GACCA,EAAc4B,KACZ,SAACK,GAAD,OACEA,EAAOzC,OACL,kBAAC,EAAD,CACEsC,IAAKG,EAAOC,SACZ1C,MAAOyC,EAAOzC,MACdC,OAAQwC,EAAOxC,OACfC,IAAKuC,EAAOvC,cCnFdyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4BCHAC,EAAY,CAChB7B,cAAe,IAGF8B,EAnBK,WAAgC,IAA/B/B,EAA8B,uDAAtB8B,EAAWE,EAAW,uCACjD,OAAQA,EAAOzD,MACb,IAAK,wBACH,OAAIyB,EAAMC,cAAcgC,SAASD,EAAOxE,YAC/BwC,EAEF,2BACFA,GADL,IAEEC,cAAc,GAAD,mBAAMD,EAAMC,eAAZ,CAA2B+B,EAAOxE,eAEnD,QACE,OAAOwC,ICDPkC,EAAQC,YAAYJ,GAE1BK,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,QAGJK,SAASC,eAAe,SFiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.d29497b2.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction EmptySearchErrorMessage() {\n  return <h5 className=\"error-message\">(Search cannot be blank)</h5>;\n}\n\nexport default EmptySearchErrorMessage;\n","import React from \"react\";\n\nfunction ErrorMessage() {\n  return <h3 className=\"error-message\">An error has occurred. Please try your search again.</h3>;\n}\n\nexport default ErrorMessage;\n","import React from \"react\";\n\nfunction NewSearchMessage() {\n  return (\n    <h5 className=\"new-search-message\">\n      Enter a keyword or phrase in the Search bar to get started!\n    </h5>\n  );\n}\n\nexport default NewSearchMessage;\n","import React from \"react\";\n\nfunction SearchHistoryElement({ searchTerm, submitSearch }) {\n  return (\n    <p\n      className=\"search-history-element\"\n      onClick={(event) => submitSearch(searchTerm, event)}\n    >\n      {searchTerm}\n    </p>\n  );\n}\n\nexport default SearchHistoryElement;\n","import React from \"react\";\nimport { Navbar, Form, FormControl, Button } from \"react-bootstrap\";\n\nfunction SearchInput({ handleInputChange, submitSearch, query }) {\n  return (\n    <Navbar className=\"navbar\" bg=\"dark\" expand=\"lg\">\n      <Navbar.Brand>Hacker News Search</Navbar.Brand>\n      <Form\n        inline\n        className=\"ml-auto\"\n        onSubmit={(event) => submitSearch(query, event)}\n      >\n        <FormControl\n          type=\"text\"\n          placeholder=\"Search\"\n          className=\"mr-sm-2\"\n          onChange={handleInputChange}\n          value={query}\n        />\n        <Button\n          variant=\"outline-success\"\n          onClick={(event) => submitSearch(query, event)}\n        >\n          Search\n        </Button>\n      </Form>\n    </Navbar>\n  );\n}\n\nexport default SearchInput;\n","import React from \"react\";\n\nfunction SearchResult({ title, author, url }) {\n  return (\n    <div className=\"search-result-div\">\n      <span className=\"search-result-span\">\n        <a href={url}>{title}</a> by: {author}\n      </span>\n    </div>\n  );\n}\n\nexport default SearchResult;\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport \"./App.css\";\nimport EmptySearchErrorMessage from \"./components/EmptySearchErrorMessage\";\nimport ErrorMessage from \"./components/ErrorMessage\";\nimport NewSearchMessage from \"./components/NewSearchMessage\";\nimport SearchHistoryElement from \"./components/SearchHistoryElement\";\nimport SearchInput from \"./components/SearchInput\";\nimport SearchResult from \"./components/SearchResult\";\nimport axios from \"axios\";\n\nfunction App() {\n  const [queryState, setQueryState] = useState(\"\");\n  const [searchResults, setSearchResults] = useState();\n  const [errorExists, setErrorExists] = useState(false);\n  const [emptySearch, setEmptySearch] = useState(false);\n  const [submittedSearch, setSubmittedSearch] = useState(false);\n\n  const userSearchHistory = useSelector((state) => state.searchHistory);\n\n  const dispatch = useDispatch();\n\n  function handleInputChange(e) {\n    setQueryState(e.target.value);\n  }\n\n  async function submitSearch(query, event) {\n    event.preventDefault();\n\n    setErrorExists(false);\n    setEmptySearch(false);\n    setSubmittedSearch(true);\n\n    if (query.trim() === \"\") {\n      setSearchResults([]);\n      setEmptySearch(true);\n      return setErrorExists(true);\n    }\n\n    dispatch({\n      type: \"ADD_TO_SEARCH_HISTORY\",\n      searchTerm: queryState,\n    });\n\n    try {\n      const data = await axios.get(\n        `https://hn.algolia.com/api/v1/search?query=${query}`\n      );\n      setQueryState(\"\");\n      return setSearchResults(data.data.hits);\n    } catch (err) {\n      setErrorExists(true);\n      setQueryState(\"\");\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <SearchInput\n        className=\"search-input\"\n        handleInputChange={handleInputChange}\n        submitSearch={submitSearch}\n        query={queryState}\n      />\n      <Container>\n        {userSearchHistory.length === 0 && !submittedSearch && (\n          <NewSearchMessage />\n        )}\n        {errorExists && <ErrorMessage />}\n        {emptySearch && <EmptySearchErrorMessage />}\n        <Row>\n          <Col md={3} className=\"text-center\">\n            {userSearchHistory.length > 0 && <h4>Previous Searches:</h4>}\n            {userSearchHistory.map((searchTerm, index) => (\n              <SearchHistoryElement\n                key={index}\n                submitSearch={submitSearch}\n                searchTerm={searchTerm}\n              />\n            ))}\n          </Col>\n          <Col md={9} className=\"text-right align-right\">\n            {console.log(\"search results\", searchResults)}\n            {searchResults && searchResults.length > 0 && (\n              <h4>Search Results:</h4>\n            )}\n            {searchResults &&\n              searchResults.map(\n                (result) =>\n                  result.title && (\n                    <SearchResult\n                      key={result.objectID}\n                      title={result.title}\n                      author={result.author}\n                      url={result.url}\n                    />\n                  )\n              )}\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const rootReducer = (state = initState, action) => {\n  switch (action.type) {\n    case \"ADD_TO_SEARCH_HISTORY\":\n      if (state.searchHistory.includes(action.searchTerm)) {\n        return state;\n      }\n      return {\n        ...state,\n        searchHistory: [...state.searchHistory, action.searchTerm],\n      };\n    default:\n      return state;\n  }\n};\n\nconst initState = {\n  searchHistory: [],\n};\n\nexport default rootReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport rootReducer from \"./reducers/rootReducer\";\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}